# Docker Compose für das Multi-Server-System
# Dieses Setup ermöglicht es, das gesamte Multi-Server-System mit Docker zu betreiben

# =============================================================================
# Hypixel Skyblock Recreation - Docker Compose Configuration
# =============================================================================

version: '3.8'

services:
  # Redis für erweiterte Features (optional)
  redis:
    image: redis:7-alpine
    container_name: minecraft-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - minecraft-network

  # MySQL für persistente Daten (optional)
  mysql:
    image: mysql:8.0
    container_name: minecraft-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: minecraft_root_password
      MYSQL_DATABASE: basics_network
      MYSQL_USER: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - minecraft-network

  # Hub Server
  hub:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: minecraft-hub
    restart: unless-stopped
    ports:
      - "25565:25565"
    volumes:
      - ./servers/hub:/opt/minecraft
      - ./plugins:/opt/minecraft/plugins
    environment:
      SERVER_TYPE: HUB
      SERVER_PORT: 25565
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: basics_network
      MYSQL_USERNAME: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    depends_on:
      - redis
      - mysql
    networks:
      - minecraft-network

  # Island Server
  island:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: minecraft-island
    restart: unless-stopped
    ports:
      - "25566:25566"
    volumes:
      - ./servers/island:/opt/minecraft
      - ./plugins:/opt/minecraft/plugins
    environment:
      SERVER_TYPE: ISLAND
      SERVER_PORT: 25566
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: basics_network
      MYSQL_USERNAME: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    depends_on:
      - redis
      - mysql
    networks:
      - minecraft-network

  # Dungeon Server
  dungeon:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: minecraft-dungeon
    restart: unless-stopped
    ports:
      - "25567:25567"
    volumes:
      - ./servers/dungeon:/opt/minecraft
      - ./plugins:/opt/minecraft/plugins
    environment:
      SERVER_TYPE: DUNGEON
      SERVER_PORT: 25567
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: basics_network
      MYSQL_USERNAME: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    depends_on:
      - redis
      - mysql
    networks:
      - minecraft-network

  # Event Server
  event:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: minecraft-event
    restart: unless-stopped
    ports:
      - "25568:25568"
    volumes:
      - ./servers/event:/opt/minecraft
      - ./plugins:/opt/minecraft/plugins
    environment:
      SERVER_TYPE: EVENT
      SERVER_PORT: 25568
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: basics_network
      MYSQL_USERNAME: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    depends_on:
      - redis
      - mysql
    networks:
      - minecraft-network

  # Auction Server
  auction:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: minecraft-auction
    restart: unless-stopped
    ports:
      - "25569:25569"
    volumes:
      - ./servers/auction:/opt/minecraft
      - ./plugins:/opt/minecraft/plugins
    environment:
      SERVER_TYPE: AUCTION
      SERVER_PORT: 25569
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: basics_network
      MYSQL_USERNAME: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    depends_on:
      - redis
      - mysql
    networks:
      - minecraft-network

  # Bank Server
  bank:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: minecraft-bank
    restart: unless-stopped
    ports:
      - "25570:25570"
    volumes:
      - ./servers/bank:/opt/minecraft
      - ./plugins:/opt/minecraft/plugins
    environment:
      SERVER_TYPE: BANK
      SERVER_PORT: 25570
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: basics_network
      MYSQL_USERNAME: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    depends_on:
      - redis
      - mysql
    networks:
      - minecraft-network

  # Minigame Server
  minigame:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: minecraft-minigame
    restart: unless-stopped
    ports:
      - "25571:25571"
    volumes:
      - ./servers/minigame:/opt/minecraft
      - ./plugins:/opt/minecraft/plugins
    environment:
      SERVER_TYPE: MINIGAME
      SERVER_PORT: 25571
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: basics_network
      MYSQL_USERNAME: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    depends_on:
      - redis
      - mysql
    networks:
      - minecraft-network

  # PvP Server
  pvp:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: minecraft-pvp
    restart: unless-stopped
    ports:
      - "25572:25572"
    volumes:
      - ./servers/pvp:/opt/minecraft
      - ./plugins:/opt/minecraft/plugins
    environment:
      SERVER_TYPE: PVP
      SERVER_PORT: 25572
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: basics_network
      MYSQL_USERNAME: minecraft_user
      MYSQL_PASSWORD: minecraft_password
    depends_on:
      - redis
      - mysql
    networks:
      - minecraft-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: minecraft-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - hub
      - island
      - dungeon
      - event
      - auction
      - bank
      - minigame
      - pvp
    networks:
      - minecraft-network

  # Monitoring mit Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: minecraft-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - minecraft-network

  # Grafana für Monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: minecraft-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus
    networks:
      - minecraft-network

volumes:
  redis_data:
  mysql_data:
  prometheus_data:
  grafana_data:

networks:
  minecraft-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
