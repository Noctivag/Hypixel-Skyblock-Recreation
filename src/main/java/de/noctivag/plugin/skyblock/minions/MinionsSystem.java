package de.noctivag.plugin.skyblock.minions;
import org.bukkit.inventory.ItemStack;

import de.noctivag.plugin.Plugin;
import org.bukkit.entity.Player;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.Material;
import org.bukkit.Location;
import org.bukkit.World;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Minions System f√ºr Hypixel SkyBlock
 */
public class MinionsSystem implements Listener {
    
    private final Plugin plugin;
    private final Map<UUID, List<Minion>> playerMinions = new ConcurrentHashMap<>();
    private final Map<UUID, Minion> activeMinions = new ConcurrentHashMap<>();
    
    // Minion Definition
    public static class Minion {
        private final String id;
        private final String name;
        private final MinionType type;
        private final int level;
        private final int xp;
        private final Location location;
        private final UUID ownerId;
        private final long lastAction;
        private final int actionCount;
        private final boolean isActive;
        private final List<ItemStack> inventory;
        private final int maxInventorySize;
        
        public Minion(String id, String name, MinionType type, int level, int xp, Location location, 
                     UUID ownerId, long lastAction, int actionCount, boolean isActive, 
                     List<ItemStack> inventory, int maxInventorySize) {
            this.id = id;
            this.name = name;
            this.type = type;
            this.level = level;
            this.xp = xp;
            this.location = location;
            this.ownerId = ownerId;
            this.lastAction = lastAction;
            this.actionCount = actionCount;
            this.isActive = isActive;
            this.inventory = inventory;
            this.maxInventorySize = maxInventorySize;
        }
        
        // Getters
        public String getId() { return id; }
        public String getName() { return name; }
        public MinionType getType() { return type; }
        public int getLevel() { return level; }
        public int getXp() { return xp; }
        public Location getLocation() { return location; }
        public UUID getOwnerId() { return ownerId; }
        public long getLastAction() { return lastAction; }
        public int getActionCount() { return actionCount; }
        public boolean isActive() { return isActive; }
        public List<ItemStack> getInventory() { return inventory; }
        public int getMaxInventorySize() { return maxInventorySize; }
        
        public long getActionInterval() {
            return getActionIntervalForLevel(level);
        }
        
        public int getXpForNextLevel() {
            return getXpRequiredForLevel(level + 1) - xp;
        }
        
        public int getXpRequiredForLevel(int targetLevel) {
            if (targetLevel <= 1) return 0;
            return (int) (100 * Math.pow(1.5, targetLevel - 1));
        }
        
        public boolean canPerformAction() {
            return System.currentTimeMillis() - lastAction >= getActionInterval();
        }
        
        public void performAction() {
            // Hier w√ºrde die Minion-Aktion implementiert werden
            // z.B. Block abbauen, Item sammeln, etc.
        }
        
        public void addToInventory(ItemStack item) {
            if (inventory.size() < maxInventorySize) {
                inventory.add(item);
            }
        }
        
        public boolean isInventoryFull() {
            return inventory.size() >= maxInventorySize;
        }
    }
    
    // Minion Types
    public enum MinionType {
        COAL("Coal Minion", "‚õè", "Sammelt Kohle", Material.COAL_ORE, Material.COAL),
        IRON("Iron Minion", "‚õè", "Sammelt Eisen", Material.IRON_ORE, Material.IRON_INGOT),
        GOLD("Gold Minion", "‚õè", "Sammelt Gold", Material.GOLD_ORE, Material.GOLD_INGOT),
        DIAMOND("Diamond Minion", "‚õè", "Sammelt Diamanten", Material.DIAMOND_ORE, Material.DIAMOND),
        EMERALD("Emerald Minion", "‚õè", "Sammelt Smaragde", Material.EMERALD_ORE, Material.EMERALD),
        REDSTONE("Redstone Minion", "‚õè", "Sammelt Redstone", Material.REDSTONE_ORE, Material.REDSTONE),
        LAPIS("Lapis Minion", "‚õè", "Sammelt Lapis", Material.LAPIS_ORE, Material.LAPIS_LAZULI),
        QUARTZ("Quartz Minion", "‚õè", "Sammelt Quarz", Material.NETHER_QUARTZ_ORE, Material.QUARTZ),
        OBSIDIAN("Obsidian Minion", "‚õè", "Sammelt Obsidian", Material.OBSIDIAN, Material.OBSIDIAN),
        GLOWSTONE("Glowstone Minion", "‚õè", "Sammelt Glowstone", Material.GLOWSTONE, Material.GLOWSTONE),
        GRAVEL("Gravel Minion", "‚õè", "Sammelt Kies", Material.GRAVEL, Material.GRAVEL),
        SAND("Sand Minion", "‚õè", "Sammelt Sand", Material.SAND, Material.SAND),
        CLAY("Clay Minion", "‚õè", "Sammelt Ton", Material.CLAY, Material.CLAY),
        ICE("Ice Minion", "‚õè", "Sammelt Eis", Material.ICE, Material.ICE),
        SNOW("Snow Minion", "‚õè", "Sammelt Schnee", Material.SNOW, Material.SNOWBALL),
        NETHERRACK("Netherrack Minion", "‚õè", "Sammelt Netherrack", Material.NETHERRACK, Material.NETHERRACK),
        SOUL_SAND("Soul Sand Minion", "‚õè", "Sammelt Soul Sand", Material.SOUL_SAND, Material.SOUL_SAND),
        END_STONE("End Stone Minion", "‚õè", "Sammelt End Stone", Material.END_STONE, Material.END_STONE),
        OAK("Oak Minion", "üå≤", "Sammelt Eichenholz", Material.OAK_LOG, Material.OAK_LOG),
        BIRCH("Birch Minion", "üå≤", "Sammelt Birkenholz", Material.BIRCH_LOG, Material.BIRCH_LOG),
        SPRUCE("Spruce Minion", "üå≤", "Sammelt Fichtenholz", Material.SPRUCE_LOG, Material.SPRUCE_LOG),
        JUNGLE("Jungle Minion", "üå≤", "Sammelt Dschungelholz", Material.JUNGLE_LOG, Material.JUNGLE_LOG),
        ACACIA("Acacia Minion", "üå≤", "Sammelt Akazienholz", Material.ACACIA_LOG, Material.ACACIA_LOG),
        DARK_OAK("Dark Oak Minion", "üå≤", "Sammelt Schwarzeichenholz", Material.DARK_OAK_LOG, Material.DARK_OAK_LOG),
        MANGROVE("Mangrove Minion", "üå≤", "Sammelt Mangrovenholz", Material.MANGROVE_LOG, Material.MANGROVE_LOG),
        CHERRY("Cherry Minion", "üå≤", "Sammelt Kirschholz", Material.CHERRY_LOG, Material.CHERRY_LOG),
        WHEAT("Wheat Minion", "üåæ", "Sammelt Weizen", Material.WHEAT, Material.WHEAT),
        CARROT("Carrot Minion", "üåæ", "Sammelt Karotten", Material.CARROT, Material.CARROT),
        POTATO("Potato Minion", "üåæ", "Sammelt Kartoffeln", Material.POTATO, Material.POTATO),
        BEETROOT("Beetroot Minion", "üåæ", "Sammelt R√ºben", Material.BEETROOT, Material.BEETROOT),
        NETHER_WART("Nether Wart Minion", "üåæ", "Sammelt Nether Wart", Material.NETHER_WART, Material.NETHER_WART),
        SUGAR_CANE("Sugar Cane Minion", "üåæ", "Sammelt Zuckerrohr", Material.SUGAR_CANE, Material.SUGAR_CANE),
        CACTUS("Cactus Minion", "üåæ", "Sammelt Kakteen", Material.CACTUS, Material.CACTUS),
        MELON("Melon Minion", "üåæ", "Sammelt Melonen", Material.MELON, Material.MELON),
        PUMPKIN("Pumpkin Minion", "üåæ", "Sammelt K√ºrbisse", Material.PUMPKIN, Material.PUMPKIN),
        COCOA("Cocoa Minion", "üåæ", "Sammelt Kakao", Material.COCOA_BEANS, Material.COCOA_BEANS),
        MUSHROOM("Mushroom Minion", "üåæ", "Sammelt Pilze", Material.RED_MUSHROOM, Material.RED_MUSHROOM),
        FISH("Fish Minion", "üé£", "Sammelt Fisch", Material.COD, Material.COD),
        SALMON("Salmon Minion", "üé£", "Sammelt Lachs", Material.SALMON, Material.SALMON),
        PUFFERFISH("Pufferfish Minion", "üé£", "Sammelt Kugelfisch", Material.PUFFERFISH, Material.PUFFERFISH),
        TROPICAL_FISH("Tropical Fish Minion", "üé£", "Sammelt Tropenfisch", Material.TROPICAL_FISH, Material.TROPICAL_FISH),
        INK_SAC("Ink Sac Minion", "üé£", "Sammelt Tintenbeutel", Material.INK_SAC, Material.INK_SAC),
        SPONGE("Sponge Minion", "üé£", "Sammelt Schw√§mme", Material.SPONGE, Material.SPONGE),
        PRISMARINE_SHARD("Prismarine Shard Minion", "üé£", "Sammelt Prismarine Shards", Material.PRISMARINE_SHARD, Material.PRISMARINE_SHARD),
        PRISMARINE_CRYSTALS("Prismarine Crystals Minion", "üé£", "Sammelt Prismarine Crystals", Material.PRISMARINE_CRYSTALS, Material.PRISMARINE_CRYSTALS),
        ROTTEN_FLESH("Rotten Flesh Minion", "‚öî", "Sammelt Verrottetes Fleisch", Material.ROTTEN_FLESH, Material.ROTTEN_FLESH),
        BONE("Bone Minion", "‚öî", "Sammelt Knochen", Material.BONE, Material.BONE),
        STRING("String Minion", "‚öî", "Sammelt Faden", Material.STRING, Material.STRING),
        SPIDER_EYE("Spider Eye Minion", "‚öî", "Sammelt Spinnenaugen", Material.SPIDER_EYE, Material.SPIDER_EYE),
        GUNPOWDER("Gunpowder Minion", "‚öî", "Sammelt Schie√üpulver", Material.GUNPOWDER, Material.GUNPOWDER),
        ENDER_PEARL("Ender Pearl Minion", "‚öî", "Sammelt Ender Perlen", Material.ENDER_PEARL, Material.ENDER_PEARL),
        BLAZE_ROD("Blaze Rod Minion", "‚öî", "Sammelt Blaze St√§be", Material.BLAZE_ROD, Material.BLAZE_ROD),
        GHAST_TEAR("Ghast Tear Minion", "‚öî", "Sammelt Ghast Tr√§nen", Material.GHAST_TEAR, Material.GHAST_TEAR),
        MAGMA_CREAM("Magma Cream Minion", "‚öî", "Sammelt Magma Creme", Material.MAGMA_CREAM, Material.MAGMA_CREAM),
        NETHER_STAR("Nether Star Minion", "‚öî", "Sammelt Nether Sterne", Material.NETHER_STAR, Material.NETHER_STAR),
        DRAGON_EGG("Dragon Egg Minion", "‚öî", "Sammelt Dracheneier", Material.DRAGON_EGG, Material.DRAGON_EGG);
        
        private final String name;
        private final String icon;
        private final String description;
        private final Material sourceBlock;
        private final Material outputItem;
        
        MinionType(String name, String icon, String description, Material sourceBlock, Material outputItem) {
            this.name = name;
            this.icon = icon;
            this.description = description;
            this.sourceBlock = sourceBlock;
            this.outputItem = outputItem;
        }
        
        public String getName() { return name; }
        public String getIcon() { return icon; }
        public String getDescription() { return description; }
        public Material getSourceBlock() { return sourceBlock; }
        public Material getOutputItem() { return outputItem; }
    }
    
    public MinionsSystem(Plugin plugin) {
        this.plugin = plugin;
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        startMinionTick();
    }
    
    /**
     * Startet den Minion-Tick
     */
    private void startMinionTick() {
        plugin.getServer().getScheduler().runTaskTimer(plugin, () -> {
            for (Minion minion : activeMinions.values()) {
                if (minion.canPerformAction()) {
                    minion.performAction();
                }
            }
        }, 20L, 20L); // Jede Sekunde
    }
    
    /**
     * Erstellt einen neuen Minion
     */
    public boolean createMinion(Player player, MinionType type, Location location) {
        UUID playerId = player.getUniqueId();
        
        // Pr√ºfe ob Spieler bereits zu viele Minions hat
        List<Minion> minions = playerMinions.getOrDefault(playerId, new ArrayList<>());
        int maxMinions = getMaxMinionsForPlayer(playerId);
        if (minions.size() >= maxMinions) {
            player.sendMessage("¬ßcDu hast bereits die maximale Anzahl an Minions!");
            return false;
        }
        
        // Erstelle Minion
        String minionId = UUID.randomUUID().toString();
        Minion minion = new Minion(minionId, type.getName(), type, 1, 0, location, playerId, 
                                 System.currentTimeMillis(), 0, true, new ArrayList<>(), 15);
        
        // F√ºge zu Spieler-Minions hinzu
        minions.add(minion);
        playerMinions.put(playerId, minions);
        activeMinions.put(UUID.fromString(minionId), minion);
        
        player.sendMessage("¬ßaMinion erstellt!");
        player.sendMessage("¬ße" + type.getIcon() + " " + type.getName());
        player.sendMessage("¬ß7" + type.getDescription());
        
        return true;
    }
    
    /**
     * Entfernt einen Minion
     */
    public boolean removeMinion(Player player, String minionId) {
        UUID playerId = player.getUniqueId();
        List<Minion> minions = playerMinions.get(playerId);
        
        if (minions == null) {
            player.sendMessage("¬ßcDu hast keine Minions!");
            return false;
        }
        
        Minion minion = minions.stream()
            .filter(m -> m.getId().equals(minionId))
            .findFirst()
            .orElse(null);
        
        if (minion == null) {
            player.sendMessage("¬ßcMinion nicht gefunden!");
            return false;
        }
        
        // Entferne Minion
        minions.remove(minion);
        activeMinions.remove(UUID.fromString(minionId));
        
        player.sendMessage("¬ßaMinion entfernt!");
        
        return true;
    }
    
    /**
     * Sammelt Items von einem Minion
     */
    public boolean collectFromMinion(Player player, String minionId) {
        UUID playerId = player.getUniqueId();
        List<Minion> minions = playerMinions.get(playerId);
        
        if (minions == null) {
            player.sendMessage("¬ßcDu hast keine Minions!");
            return false;
        }
        
        Minion minion = minions.stream()
            .filter(m -> m.getId().equals(minionId))
            .findFirst()
            .orElse(null);
        
        if (minion == null) {
            player.sendMessage("¬ßcMinion nicht gefunden!");
            return false;
        }
        
        if (minion.getInventory().isEmpty()) {
            player.sendMessage("¬ßcMinion hat keine Items!");
            return false;
        }
        
        // Gib Items an Spieler
        for (ItemStack item : minion.getInventory()) {
            player.getInventory().addItem(item);
        }
        
        // Leere Minion-Inventar
        minion.getInventory().clear();
        
        player.sendMessage("¬ßaItems gesammelt!");
        player.sendMessage("¬ß7" + minion.getInventory().size() + " Items erhalten");
        
        return true;
    }
    
    /**
     * Gibt die maximale Anzahl an Minions f√ºr einen Spieler zur√ºck
     */
    private int getMaxMinionsForPlayer(UUID playerId) {
        // Hier w√ºrde normalerweise das SkyBlock-Level gepr√ºft werden
        // F√ºr jetzt geben wir eine feste Anzahl zur√ºck
        return 5;
    }
    
    /**
     * Gibt das Aktions-Intervall f√ºr ein Level zur√ºck
     */
    private static long getActionIntervalForLevel(int level) {
        // H√∂here Level = schnellere Aktionen
        return Math.max(1000, 5000 - (level * 100)); // Mindestens 1 Sekunde
    }
    
    /**
     * Gibt alle Minions eines Spielers zur√ºck
     */
    public List<Minion> getPlayerMinions(UUID playerId) {
        return new ArrayList<>(playerMinions.getOrDefault(playerId, new ArrayList<>()));
    }
    
    /**
     * Gibt einen Minion zur√ºck
     */
    public Minion getMinion(String minionId) {
        return activeMinions.get(UUID.fromString(minionId));
    }
    
    /**
     * Gibt alle aktiven Minions zur√ºck
     */
    public Map<UUID, Minion> getActiveMinions() {
        return new HashMap<>(activeMinions);
    }
    
    /**
     * Gibt Minions eines bestimmten Typs zur√ºck
     */
    public List<Minion> getMinionsByType(MinionType type) {
        return activeMinions.values().stream()
            .filter(minion -> minion.getType() == type)
            .toList();
    }
}
