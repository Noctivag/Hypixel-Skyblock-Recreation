package de.noctivag.plugin.gui;
import org.bukkit.inventory.ItemStack;

import de.noctivag.plugin.Plugin;
import de.noctivag.plugin.npcs.AdvancedNPCSystem;
import de.noctivag.plugin.npcs.HypixelStyleNPC;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.meta.ItemMeta;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextDecoration;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class NPCManagementGUI extends CustomGUI {
    private final Plugin plugin;
    private final Player player;
    private final AdvancedNPCSystem npcSystem;

    public NPCManagementGUI(Plugin plugin, Player player) {
        super(54, Component.text("ยง6ยงlNPC Management").color(NamedTextColor.GOLD).decorate(TextDecoration.BOLD));
        this.plugin = plugin;
        this.player = player;
        this.npcSystem = plugin.getAdvancedNPCSystem();
        setupItems();
    }

    private void setupItems() {
        // Header
        setupHeader();
        
        // NPC List
        setupNPCList();
        
        // Management Tools
        setupManagementTools();
        
        // Statistics
        setupStatistics();
        
        // Navigation
        setupNavigation();
        
        // Decorative borders
        setupDecorativeBorders();
    }

    private void setupHeader() {
        ItemStack header = new ItemStack(Material.COMMAND_BLOCK);
        ItemMeta meta = header.getItemMeta();
        
        if (meta != null) {
            meta.displayName(Component.text("ยง6ยงlNPC Management").color(NamedTextColor.GOLD).decorate(TextDecoration.BOLD));
            
            Map<String, HypixelStyleNPC> activeNPCs = npcSystem.getActiveNPCs();
            List<Component> lore = Arrays.asList(
                Component.text("ยง7Manage all NPCs on the server"),
                Component.text("ยง7Total NPCs: ยงa" + activeNPCs.size()),
                Component.text("ยง7NPC Types: ยงa" + AdvancedNPCSystem.NPCType.values().length),
                Component.text(""),
                Component.text("ยงeClick on NPCs to manage them!")
            );
            meta.lore(lore);
            header.setItemMeta(meta);
        }
        getInventory().setItem(4, header);
    }

    private void setupNPCList() {
        Map<String, HypixelStyleNPC> activeNPCs = npcSystem.getActiveNPCs();
        int slot = 10;
        
        for (Map.Entry<String, HypixelStyleNPC> entry : activeNPCs.entrySet()) {
            if (slot >= 35) break; // Don't overflow
            
            HypixelStyleNPC npc = entry.getValue();
            AdvancedNPCSystem.NPCType type = npc.getType();
            
            setItem(slot, type.getIcon(), "ยง6ยงl" + npc.getDisplayName(), 
                "ยง7Type: " + type.getDisplayName(),
                "ยง7ID: ยงe" + npc.getNpcId(),
                "ยง7World: ยงe" + npc.getLocation().getWorld().getName(),
                "ยง7X: ยงe" + npc.getLocation().getBlockX(),
                "ยง7Y: ยงe" + npc.getLocation().getBlockY(),
                "ยง7Z: ยงe" + npc.getLocation().getBlockZ(),
                "",
                "ยงeClick to manage!");
            
            slot++;
        }
    }

    private void setupManagementTools() {
        // Create NPC Tool
        setItem(37, Material.STICK, "ยงaยงlโ Create NPC Tool", 
            "ยง7Get the NPC creation tool",
            "ยง7โข Right-click to place NPCs",
            "ยง7โข Left-click to manage NPCs",
            "",
            "ยงeClick to get tool!");

        // Remove All NPCs
        setItem(38, Material.BARRIER, "ยงcยงl๐๏ธ Remove All NPCs", 
            "ยง7Remove all NPCs from server",
            "ยง7โข WARNING: This cannot be undone!",
            "ยง7โข Removes all NPCs permanently",
            "",
            "ยงeClick to remove all!");

        // Reload NPCs
        setItem(39, Material.EMERALD, "ยงaยงl๐ Reload NPCs", 
            "ยง7Reload all NPCs from database",
            "ยง7โข Refreshes NPC data",
            "ยง7โข Fixes any issues",
            "",
            "ยงeClick to reload!");

        // Export NPCs
        setItem(40, Material.PAPER, "ยงeยงl๐ Export NPCs", 
            "ยง7Export NPC data to file",
            "ยง7โข Backup NPC configuration",
            "ยง7โข Save to file",
            "",
            "ยงeClick to export!");

        // Import NPCs
        setItem(41, Material.BOOK, "ยงbยงl๐ฅ Import NPCs", 
            "ยง7Import NPC data from file",
            "ยง7โข Restore NPC configuration",
            "ยง7โข Load from file",
            "",
            "ยงeClick to import!");
    }

    private void setupStatistics() {
        Map<String, HypixelStyleNPC> activeNPCs = npcSystem.getActiveNPCs();
        AdvancedNPCSystem.PlayerNPCManager playerManager = npcSystem.getPlayerNPCManager(player.getUniqueId());
        
        // Player Statistics
        setItem(28, Material.GOLD_INGOT, "ยง6ยงl๐ Your Statistics", 
            "ยง7Your NPC management stats:",
            "ยง7โข NPCs created: ยงa" + playerManager.getNPCsCreated(),
            "ยง7โข NPCs managed: ยงa" + playerManager.getNPCsManaged(),
            "ยง7โข Total interactions: ยงa" + (playerManager.getNPCsCreated() + playerManager.getNPCsManaged()),
            "",
            "ยงeClick to view detailed stats!");

        // Global Statistics
        setItem(29, Material.DIAMOND, "ยงbยงl๐ Global Statistics", 
            "ยง7Global NPC statistics:",
            "ยง7โข Total NPCs: ยงa" + activeNPCs.size(),
            "ยง7โข Most common type: ยงaShop",
            "ยง7โข Average per world: ยงa" + (activeNPCs.size() / 3),
            "",
            "ยงeClick to view global stats!");

        // NPC Type Breakdown
        setItem(30, Material.PAPER, "ยงeยงl๐ NPC Type Breakdown", 
            "ยง7NPC types on server:",
            "ยง7โข Shop NPCs: ยงa" + getNPCTypeCount(activeNPCs, AdvancedNPCSystem.NPCType.SHOP),
            "ยง7โข Quest NPCs: ยงa" + getNPCTypeCount(activeNPCs, AdvancedNPCSystem.NPCType.QUEST),
            "ยง7โข Info NPCs: ยงa" + getNPCTypeCount(activeNPCs, AdvancedNPCSystem.NPCType.INFO),
            "ยง7โข Warp NPCs: ยงa" + getNPCTypeCount(activeNPCs, AdvancedNPCSystem.NPCType.WARP),
            "ยง7โข Bank NPCs: ยงa" + getNPCTypeCount(activeNPCs, AdvancedNPCSystem.NPCType.BANK),
            "",
            "ยงeClick to view full breakdown!");
    }

    private int getNPCTypeCount(Map<String, HypixelStyleNPC> npcs, AdvancedNPCSystem.NPCType type) {
        return (int) npcs.values().stream().filter(npc -> npc.getType() == type).count();
    }

    private void setupNavigation() {
        // Back to Main Menu
        setItem(45, Material.ARROW, "ยง7ยงlโฌ๏ธ Back to Main Menu", 
            "ยง7Return to the main menu",
            "",
            "ยงeClick to go back!");

        // Close
        setItem(49, Material.BARRIER, "ยงcยงlโ Close", 
            "ยง7Close this menu",
            "",
            "ยงeClick to close!");

        // Refresh
        setItem(51, Material.EMERALD, "ยงaยงl๐ Refresh", 
            "ยง7Refresh this menu",
            "",
            "ยงeClick to refresh!");
    }

    private void setupDecorativeBorders() {
        // Top border
        for (int i = 0; i < 9; i++) {
            setItem(i, Material.GRAY_STAINED_GLASS_PANE, "ยง7", "");
        }
        
        // Side borders
        for (int i = 9; i < 54; i += 9) {
            setItem(i, Material.GRAY_STAINED_GLASS_PANE, "ยง7", "");
        }
        for (int i = 17; i < 54; i += 9) {
            setItem(i, Material.GRAY_STAINED_GLASS_PANE, "ยง7", "");
        }
        
        // Bottom border
        for (int i = 45; i < 54; i++) {
            if (i != 49) { // Don't override close button
                setItem(i, Material.GRAY_STAINED_GLASS_PANE, "ยง7", "");
            }
        }
    }

    public void setItem(int slot, Material material, String name, String... lore) {
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        
        if (meta != null) {
            meta.displayName(Component.text(name));
            if (lore.length > 0) {
                meta.lore(Arrays.stream(lore).map(Component::text).toList());
            }
            item.setItemMeta(meta);
        }
        
        getInventory().setItem(slot, item);
    }
}
